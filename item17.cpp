// Item 17: Understand special member function generation.
#include <iostream>

using namespace std;

// Special member functions (C++98):
// 1. Default constructor
// 2. Destructor
// 3. Copy constructor
// 4. Copy assignment operator
//
// They are generated by the compiler only if needed and not explicitly declared.
// The default constructor is generated only if no other constructors are declared.
// Generated special member functions are implicitly public, inline, and non-virtual,
// except a derived class destructor, which becomes virtual if the base class destructor is virtual.

// As of C++ 11, the special member functions club has two more inductees : the move constructor and
// the move assignment operator.Their signatures are :
class Widget
{
public:
    Widget(Widget &&rhs);            // move constructor
    Widget &operator=(Widget &&rhs); // move assignment operator
};

// The Rule of Three
// states that if you declare any of a copy constructor, copy assignment operator, or
// destructor, you should declare all three.

class A
{
public:
    A &operator=(const A &);
};

class Widget1
{
public:
    ~Widget1();                                    // user-declared dtor
                                                   // default copy ctor
    Widget1(const Widget1 &) = default;            // behavior is OK
    Widget1 &operator=(const Widget1 &) = default; // default copy assign
                                                   // behavior is OK
};

class Base
{
public:
    virtual ~Base() = default;
    Base(Base &&) = default; // support moving
    Base &operator=(Base &&) = default;
    Base(const Base &) = default; // support copying
    Base &operator=(const Base &) = default;
};

// The C++11 rules governing the special member functions are thus:
// • Default constructor: Same rules as C++98. Generated only if the class contains
// no user-declared constructors.
// • Destructor: Essentially same rules as C++98; sole difference is that destructors
// are noexcept by default (see Item 14). As in C++98, virtual only if a base class
// destructor is virtual.
// • Copy constructor: Same runtime behavior as C++98: memberwise copy construction
// of non-static data members. Generated only if the class lacks a userdeclared
// copy constructor. Deleted if the class declares a move operation.
// Generation of this function in a class with a user-declared copy assignment operator
// or destructor is deprecated.
// • Copy assignment operator: Same runtime behavior as C++98: memberwise
// copy assignment of non-static data members. Generated only if the class lacks a
// user-declared copy assignment operator. Deleted if the class declares a move
// operation. Generation of this function in a class with a user-declared copy constructor
// or destructor is deprecated.
// • Move constructor and move assignment operator: Each performs memberwise
// moving of non-static data members. Generated only if the class contains no userdeclared
// copy operations, move operations, or destructor.

int main()
{
    A a;
    A a1{};

    A a2{a};

    return 0;
}

// Things to Remember
// • The special member functions are those compilers may generate on their own:
// default constructor, destructor, copy operations, and move operations.
// • Move operations are generated only for classes lacking explicitly declared
// move operations, copy operations, and a destructor.
// • The copy constructor is generated only for classes lacking an explicitly
// declared copy constructor, and it’s deleted if a move operation is declared.
// The copy assignment operator is generated only for classes lacking an explicitly
// declared copy assignment operator, and it’s deleted if a move operation is
// declared. Generation of the copy operations in classes with an explicitly
// declared destructor is deprecated.
// • Member function templates never suppress generation of special member
// functions.